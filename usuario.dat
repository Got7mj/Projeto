void gravar_Usuario(Usuario *usr) {
	FILE* fp;
	fp = fopen("usuarios.dat", "ab");
	if (fp == NULL) {
		tela_Erro_Arquivo();
	}
	fwrite(usr, sizeof(Usuario), 1, fp);
	fclose(fp);
}


Usuario* buscar_Usuario(char* id) {
	FILE* fp;
	Usuario* usr;

	usr = (Usuario*) malloc(sizeof(Usuario));
	fp = fopen("usuarios.dat", "rb");
	if (fp == NULL) {
		tela_Erro_Arquivo();
	}
	while(fread(usr, sizeof(Usuario), 1, fp)) {
		if ((strcmp(usr->id, id) == 0) && (usr->status == True)) {
			fclose(fp);
			return usr;
		}
	}
	fclose(fp);
	return NULL;
}


void exibir_Usuario(Usuario* usr) {

	if (usr == NULL) {
		printf("\n= = = Usuario Inexistente = = =\n");
	} else {
		printf("\n= = = Usuario Cadastrado = = =\n");
		printf("Id do usuario: %s\n", usr->id);
		printf("Nome do usuario: %s\n", usr->nome);
		printf("Email do usuario: %s\n", usr->email);
		printf("Celular: %s\n", usr->celular);
		printf("Data de Nasc: %s\n", usr->nasc);		
		printf("Status: %d\n", usr->status);
	}
	printf("\n\nTecle ENTER para continuar!\n\n");
	getchar();
}


void regravar_Usuario(Usuario* usr) {
	int achou;
	FILE* fp;
	Usuario* usr_Lido;

	usr_Lido = (Usuario*) malloc(sizeof(Usuario));
	fp = fopen("usuarios.dat", "r+b");
	if (fp == NULL) {
		tela_Erro_Arquivo();
	}
	// while(!feof(fp)) {
	achou = False;
	while(fread(usr_Lido, sizeof(Usuario), 1, fp) && !achou) {
		//fread(usr_Lido, sizeof(Usuario), 1, fp);
		if (strcmp(usr_Lido->id, usr->id) == 0) {
			achou = True;
			fseek(fp, -1*sizeof(Usuario), SEEK_CUR);
        	fwrite(usr, sizeof(Usuario), 1, fp);
			//break;
		}
	}
	fclose(fp);
	free(usr_Lido);
}

void cadastrar_Usuario(void) {
	Usuario *usr;
	usr = tela_Preencher_Usuario();
	gravar_Usuario(usr);
	free(usr);
}

void consultar_Usuario(void) {
	Usuario *usr;
	char* id;
	usr = buscar_Usuario(id);
	exibir_Usuario(usr);
	free(usr); 
	free(id);
}

void alterar_Usuario(void) {
	Usuario *usr;
	char* id;
	usr = buscar_Usuario(id);
	if (usr == NULL) {
		printf("\n\nUsuario não encontrado!\n\n");
	} else {
		usr = tela_Preencher_Usuario();
		strcpy(usr->id, id);
		regravar_Usuario(usr);
		// Outra opção:
		// excluir_Usuario(id);
		// gravar_Usuario(usr);
		free(usr);
	}
	free(id);
}

void excluir_Usuario(void) {
	Usuario *usr;
	char* id;
	id = tela_excluir_Usuario();
	usr = (Usuario*) malloc(sizeof(Usuario));
	usr = buscar_Usuario(id);
	if (usr == NULL) {
		printf("\n\nUsuario não encontrado!\n\n");
	} else {
		usr->status = False;
		regravar_Usuario(usr);
		free(usr);
	}
	free(id);
}
